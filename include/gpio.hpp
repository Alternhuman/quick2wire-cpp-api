/**
    \file gpio.hpp
    An overly extended example of how to use breathe
*/

/*!
    With a little bit of a elaboration, should you feel it necessary.
*/

#ifndef _GPIO_HPP
#define _GPIO_HPP

#include <stdlib.h>
#include <stdio.h>
#include <exception>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <unistd.h>

#include <map>

#include "board_revision.hpp"

#define OUT "out"
#define IN "in"

#define RISING = "rising"
#define FALLING = "falling"
#define BOTH = "both"
    
#define PULLDOWN = "pulldown"
#define PULLUP = "pullup"

#define BUTTON 0
#define LED 1
#define SPI_INTERRUPT 6
#define I2C_INTERRUPT 7

int gpio_admin(char * subcommand, int pin, char* pull=NULL);

class PinBank;
class Pin;
class GPIO;

class GPIO{


public:
	/*! GPIO constructor. Initializes the PinBank array and detects 
	the Raspberry Pi model in which the code is running.
	*/
	GPIO();

	/*! GPIO destructor.*/
	~GPIO();

	
	PinBank *pins;

	//!Stores the Raspberry Pi version number in which the code is running
	int pi_revision;
};


class PinBank{
public:
	//! Creates the mapping array used by index_to_soc and the relevant data stuctures
	PinBank();

	/*!
	Returns a Pin object which can be used to manipulate the *index* GPIO pin 
	\param index - The index of the pin. See 
	\returns The Pin object
	*/
	Pin at(int index);

	/*!
	Returns a Pin object which can be used to manipulate the *index* GPIO pin 
	\param index - The index of the pin. See 
	\returns The Pin object
	*/
	Pin pin(int index);

	/*!
	Returns true if the length of the pins array is greater than 0
	\returns Bool
	*/
	bool has_len();

	/*!
	Returns the number of available pins (both free and in use).
	*/
	int length();

private:
	/*!
	Translates the index numbering to the SoC value.
	*/
	int index_to_soc(int index);

	/*!
	The various models of Raspberry Pi use different GPIO numbering conventions. 
	The function returns the SoC value for the selected pin 
	according to the Raspberry Pi version.
	\param v1 The value of the pin for Rasbperry Pi 1 A and B
	\param v2 The value of the pin for Rasbperry Pi 1 B+ and 2 B
	\returns v1 or v2, according to the value of pi_revision
	*/
	int by_revision(int v1, int v2);

	int count;
	int pi_revision;
	int *_pi_gpio_pins;
};

class Pin{

public:
	/*!
	Creates a Pin with index and soc_pin_number, storing a reference to the PinBank.
	The direction, interrupt and pull parameters can also be set during the creation
	\param index the identity of the pin used to create the derived class.
	\param the pin on the header to control, identified by the SoC pin number.
	\param direction (optional) the direction of the pin, either IN or OUT.
	\param interrupt (optional)
	\param pull (optional)
	\returns The initialized Pin.
	*/
	 
	Pin(PinBank *bank, int index, int soc_pin_number,char* direction=IN, int interrupt=0, int pull=0);
	
	/*!
	Exports the pin and opens the file descriptor for the pin value and sets its direction (IN/OUT).
	\returns 0 if all the operations are successful. Otherwise, a perror message is thrown and the
	quick2wire_errno variable is set. #TODO
	*/
	int open();

	/*!
	Closes the file descriptor and unexports the pin.
	\returns 0 if succesful or if the pin was already closed. Otherwise it returns the status code
	returned by gpio_admin.
	*/
	int close();

	/*!
	Check if the pin has been closed. A closed pin is that which has never been open 	or which has been open and already closed.
	\returns Returns true if the pin is closed, otherwise, false is returned.
	*/
	bool closed();

	/*!
	Returns the SoC pin number
	\returns The SoC pin number
	*/
	int get_soc_pin_number();
	
	/*!
	Returns the value of the Pin (0 if down, 1 if up)
	\returns The value of the pin
	*/
	int getValue();

	/*!
	Sets the value of the pin
	\param value The value to set
	*/
	void setValue(int value);
	
	/*!
	Returns the index number of the pin
	*/
	int getIndex();
	/*!
	Sets the number of the pin
	*/
	void setIndex(int value);

	/*!
	Returns the PinBank related to the pin
	\returns PinBank
	*/
	PinBank* getBank();

	/*!
	Sets a new PinBank
	*/
	void setBank(PinBank *);
	
	/*!
	Returns the direction of the pin as an string
	\returns The direction of the pin
	*/
	char* getDirection();

	/*!
	Sets the direction of the pin (IN/OUT)
	*/
	void setDirection(char* direction);

	/*interrupt, pull, fileno*/
private:

	/*!
	Gets the value of the pin.
	\returns The value of the pin
	*/
	int get();
	
	/*!
	Sets the value of the pin.
	\param value The new value
	*/
	int set(int value);

	/*!
	Writes the string value in filename, relative to the path in the /sys/devices directory for the pin.
	the absolute path is generated by the pin_path function. Writing on the file alters the behaviour of the
	pin, and depending on the name of the file, the results differ:

	<ul>
		<li>direction: the direction of the pin (in, out)</li>
		<li>edge</li>
		<li>the value of the pin value (0, 1)</li>
	</ul>

	\param filename The name of the file. Typical values are: direction, edge, value.
	\param value The value to write.
	*/
    int write(char* filename, char* value);

    /*!
	Returns the absolute path for the filename value inside the gpio directory for the value of the Pin.
	The function is used by write to determine where to write a property of the GPIO port.
	\param filename The name of the file.
	\returns The absolute path (including filename).
    */
    char * pin_path(char *filename);

    /*!
	Returns information about the pin.
	*/
    char* to_string();
    
    //!The file pointer to the value file inside the pin folder
    FILE *file = NULL;

	int trigger;
	
	//! The direction of the pin
	char direction[3];
	
	//! The pin number according to the SoC convention
	int soc_pin_number;

	char * pull;
	
	//!The index of the pin
	int index;

	//! A pointer to the PinBank
	PinBank *bank;
};

#endif
